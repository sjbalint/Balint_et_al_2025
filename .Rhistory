}
temp.df <- temp.df %>%
select(-c(time.hr,SiO.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
# import data -------------------------------------------------------------
weights.df <- read_excel("raw/silica/BSi_weights.xlsx") #weights
seal.df <- read.csv("raw/silica/silica_12092022.csv") %>% #data from SEAL
select(c("Sample.ID","SiO2.uM")) %>%
group_by(Sample.ID) %>%
summarize_all(mean) %>%
ungroup()
# parse sample ID ---------------------------------------------------------
seal.df$id <- str_sub(seal.df$Sample.ID,0,-2) %>% #return numeric sample identifier
as.numeric()
seal.df$time <- str_sub(seal.df$Sample.ID,start=-1) #return letter time indentifier
#convert letter time indentifier to number of hours
seal.df$time.hr <- factor(seal.df$time,levels=c("A","B","C"), labels=c(3,4,5)) %>%
as.numeric()
silica.df <- left_join(seal.df,weights.df)
#drop_na(replicate)
# calculate percent SiO ---------------------------------------------------
silica.df$SiO2.mg <- silica.df$SiO2.uM * 60.08 * 0.04 * 10 * 0.1
silica.df$SiO2.prct <- silica.df$SiO2.mg/silica.df$final.mg
silica.df <- silica.df %>%
select(c("id","time.hr","replicate","core","depth.cm","SiO2.prct"))
# linear regression -------------------------------------------------------
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
mintime <- min(temp.df$time.hr)
temp.df <- temp.df %>%
mutate(time.hr=time.hr-mintime) %>%
data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
temp.df$intercept <- coefficients(lm.Bsi) %>% .[1]
temp.df$slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$R2 <- summary(lm.Bsi)$r.squared
temp.df$p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$mean.SiO.prct <- mean(temp.df$SiO.prct)
if(temp.df$p<=0.05 & temp.df$R2>=0.65){
temp.df$extrapolate <- TRUE
} else {
temp.df$extrapolate <- FALSE
}
temp.df <- temp.df %>%
select(-c(time.hr,SiO.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
mintime <- min(temp.df$time.hr)
temp.df <- temp.df %>%
mutate(time.hr=time.hr-mintime) %>%
data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
temp.df$intercept <- coefficients(lm.Bsi) %>% .[1]
temp.df$slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$mean.SiO.prct <- mean(temp.df$SiO.prct)
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
} else {
temp.df$extrapolate <- FALSE
}
temp.df <- temp.df %>%
select(-c(time.hr,SiO.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
mintime <- min(temp.df$time.hr)
temp.df <- temp.df %>%
mutate(time.hr=time.hr-mintime) %>%
data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
temp.df$intercept <- coefficients(lm.Bsi) %>% .[1]
temp.df$slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
} else {
temp.df$extrapolate <- FALSE
}
temp.df <- temp.df %>%
select(-c(time.hr,SiO2.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
silica.df <- results.df
save(silica.df,file="Rdata/silica.Rdata")
basetheme <- list(
theme_classic(),
coord_flip(),
scale_x_reverse(),
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")
)
ggplot(results.df,aes(depth.cm,mean.SiO.prct))+
basetheme+
geom_point()+
geom_line()
ggplot(results.df,aes(depth.cm,mean.SiO2.prct))+
basetheme+
geom_point()+
geom_line()
ggsave("figures/silica.png")
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$final.SiO2.prct <- intercept
} else {
temp.df$final.SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr,final.SiO2.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
View(temp.df)
seal.df$id <- str_sub(seal.df$Sample.ID,0,-2) %>% #return numeric sample identifier
as.numeric()
seal.df$time <- str_sub(seal.df$Sample.ID,start=-1) #return letter time indentifier
#convert letter time indentifier to number of hours
seal.df$time.hr <- factor(seal.df$time,levels=c("A","B","C"), labels=c(3,4,5)) %>%
as.numeric()
silica.df <- left_join(seal.df,weights.df)
#drop_na(replicate)
# calculate percent SiO ---------------------------------------------------
silica.df$SiO2.mg <- silica.df$SiO2.uM * 60.08 * 0.04 * 10 * 0.1
silica.df$SiO2.prct <- silica.df$SiO2.mg/silica.df$final.mg
silica.df <- silica.df %>%
select(c("id","time.hr","replicate","core","depth.cm","SiO2.prct"))
# linear regression -------------------------------------------------------
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$final.SiO2.prct <- intercept
} else {
temp.df$final.SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr,final.SiO2.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$final.SiO2.prct <- intercept
} else {
temp.df$final.SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr,SiO2.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$SiO2.prct <- intercept
} else {
temp.df$SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr,SiO2.prct)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$SiO2.prct <- intercept
} else {
temp.df$SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
iso.df <- full_join(unacidified.df,acidified.df)
View(iso.df)
load("~/Sawyer Balint/RStudio/wickford_cores/Rdata/iso.Rdata")
View(P.df)
iso.df <- full_join(unacidified.df,acidified.df)
iso.df <- left_join(iso.df,n.df)
iso.df <- left_join(iso.df,P.df)
iso.df$NP <- iso.df$`%N`/iso.df$P.total
iso.df$CN <- iso.df$`%C.total`/iso.df$`%N`
iso.df$P.total <- iso.df$P.total*100
iso.df$location <- factor(iso.df$location,levels=c("North","Middle","South"))
iso.df <- left_join(iso.df,dates.df)
iso.df <- left_join(iso.df,silica.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(stringr)
# import data -------------------------------------------------------------
weights.df <- read_excel("raw/silica/BSi_weights.xlsx") #weights
seal.df <- read.csv("raw/silica/silica_12092022.csv") %>% #data from SEAL
select(c("Sample.ID","SiO2.uM")) %>%
group_by(Sample.ID) %>%
summarize_all(mean) %>%
ungroup()
# parse sample ID ---------------------------------------------------------
seal.df$id <- str_sub(seal.df$Sample.ID,0,-2) %>% #return numeric sample identifier
as.numeric()
seal.df$time <- str_sub(seal.df$Sample.ID,start=-1) #return letter time indentifier
#convert letter time indentifier to number of hours
seal.df$time.hr <- factor(seal.df$time,levels=c("A","B","C"), labels=c(3,4,5)) %>%
as.numeric()
silica.df <- left_join(seal.df,weights.df)
#drop_na(replicate)
# calculate percent SiO ---------------------------------------------------
silica.df$SiO2.mg <- silica.df$SiO2.uM * 60.08 * 0.04 * 10 * 0.1
silica.df$SiO2.prct <- silica.df$SiO2.mg/silica.df$final.mg
silica.df <- silica.df %>%
select(c("id","time.hr","replicate","core","depth.cm","SiO2.prct"))
# linear regression -------------------------------------------------------
id.list <- silica.df %>% #create list of sample ids
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
mean.SiO2.prct <- mean(temp.df$SiO2.prct)
temp.df$intercept <- intercept
temp.df$slope <- slope
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
silica.df <- results.df %>%
select(c("id","replicate","depth.cm","SiO2.prct"))
save(silica.df,file="Rdata/silica.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/grainsize.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/grainsize.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/graph_grainsize.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
View(iso.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
View(silica.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
View(seal.df)
View(weights.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
silica.df <- results.df %>%
select(c("location","depth.cm","SiO2.prct")) %>%
group_by(c("location","depth.cm")) %>%
summarize_all(mean) %>%
ungroup()
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
silica.df <- results.df %>%
select(c("location","depth.cm","SiO2.prct")) %>%
group_by(c("location","depth.cm"))
silica.df <- results.df %>%
select(c("location","depth.cm","SiO2.prct")) %>%
group_by(location,depth.cm) %>%
summarize_all(mean) %>%
ungroup()
View(silica.df)
silica.df <- results.df %>%
select(c("location","depth.cm","SiO2.prct")) %>%
group_by(location,depth.cm) %>%
summarize_all(mean) %>%
ungroup() %>%
drop_na(location)
save(silica.df,file="Rdata/silica.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
ggsave("figures/silica.png",width=mywidth, height=myheight)
temp.df <- plot_longer(iso.df,c("SiO2.prct","NP","d15N.permil"))
hline_factors <- temp.df$factor %>%
unique()
hlines.df <- data.frame(factor=hline_factors,y=c(NA,16,NA))
ggplot(temp.df)+
geom_hline(data=hlines.df,aes(yintercept=y),linetype="dashed")+
mytheme+
labs(title="PRELIMINARY DATA - DO NOT DISTRIBUTE")
ggsave("figures/silica.png",width=mywidth, height=myheight)
temp.df <- plot_longer(iso.df,c("SiO2.prct","NP","d15N.permil"))
hline_factors <- temp.df$factor %>%
unique()
hlines.df <- data.frame(factor=hline_factors,y=c(NA,16,NA))
ggplot(temp.df)+
geom_hline(data=hlines.df,aes(yintercept=y),linetype="dashed")+
mytheme+
labs(title="PRELIMINARY DATA")
ggsave("figures/silica.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
temp.df <- plot_longer(iso.df,c("SiO2.prct","SiP","d15N.permil"))
ggplot(temp.df)+
mytheme+
labs(title="PRELIMINARY DATA")
ggsave("figures/silica.png",width=mywidth, height=myheight)
