R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
View(temp.df)
id.list <- silica.df %>% #create list of sample ids
drop_na(id,SiO2.pct) %>%
pull(id) %>%
unique()
id.list <- silica.df %>% #create list of sample ids
drop_na(c("id","SiO2.pct")) %>%
pull(id) %>%
unique()
id.list <- silica.df %>% #create list of sample ids
drop_na(c("id","SiO2.prct")) %>%
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
View(silica.df)
id.list <- silica.df %>% #create list of sample ids
drop_na(c("id","depth.cm","SiO2.prct")) %>%
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
View(results.list)
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$R2 <- R2
temp.df$P <- P
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
id.list <- silica.df %>% #create list of sample ids
drop_na(c("id","depth.cm","SiO2.prct")) %>%
pull(id) %>%
unique()
results.list <- list()
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$R2 <- R2
temp.df$P <- p
if(p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
#combine results into a dataframe
results.df <- do.call("rbind",results.list)
View(results.df)
silica.df <- results.df %>%
select(c("location","depth.cm","SiO2.prct")) %>%
group_by(location,depth.cm) %>%
summarize_all(mean) %>%
ungroup() %>%
drop_na(location)
save(silica.df,file="Rdata/silica.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
silica2.df <- silica.df
save(silica2.df,file="Rdata/silica_2.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
View(silica.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
for (myid in id.list){
temp.df <- silica.df %>%
filter(id==myid)
#recode time variable to always start with 0 so intercept is calculated back to first time point
#mintime <- min(temp.df$time.hr)
#temp.df <- temp.df %>%
# mutate(time.hr=time.hr-mintime) %>%
#data.frame()
#make linear model
lm.Bsi <- lm(SiO2.prct~time.hr,temp.df)
intercept <- coefficients(lm.Bsi) %>% .[1]
slope <- coefficients(lm.Bsi) %>% .[2]
temp.df$intercept <- intercept
temp.df$slope <- slope
mean.SiO2.prct <- mean(temp.df$SiO2.prct,na.rm=TRUE)
if (is.na(slope)){
temp.df$R2 <- NA
temp.df$P <- NA
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
} else {
R2 <- summary(lm.Bsi)$r.squared
p <- summary(lm.Bsi)$coefficients[2,4]
temp.df$R2 <- R2
temp.df$P <- p
if(is.na(p)==FALSE & p<=0.05 & R2>=0.65){
temp.df$extrapolate <- TRUE
temp.df$SiO2.prct <- intercept
} else {
temp.df$extrapolate <- FALSE
temp.df$SiO2.prct <- mean.SiO2.prct
}
}
temp.df <- temp.df %>%
select(-c(time.hr)) %>%
unique()
results.list <- c(list(temp.df),results.list)
}
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_BSi.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
temp.df <- plot_longer(iso.df,c("SiO2.prct","SiP","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/silica.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/parse_isotopes.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
# import data -------------------------------------------------------------
load("Rdata/silica.Rdata")
dates.df <- read_csv("raw/core_dating_2.csv", show_col_types=FALSE) %>%
mutate_if(is.character,as.factor)
dates.df$date.depth.cm <- dates.df$depth.cm
mydata.df <- read_excel("raw/isotopes_09072022.xlsx") %>%
filter(ignore==FALSE) %>%
select(c("location","depth.cm","sample.type","%N","d15N.permil","%C","d13C.permil")) %>%
mutate(across(all_of(c("location","sample.type")),as.factor))
P.df <- read_excel("raw/data_08232022.xlsx",sheet="phosphorus")
# caluclate n and means ---------------------------------------------------
n.df <- mydata.df %>%
filter(sample.type=="Acidified") %>%
group_by(location,sample.type,depth.cm) %>%
count() %>%
ungroup() %>%
select(-sample.type)
mean.df <- mydata.df %>%
group_by(location,sample.type,depth.cm) %>%
summarize_all(mean,na.rm=TRUE) %>%
ungroup()
# split acidified and unacidified -----------------------------------------
unacidified.df <- mean.df %>%
filter(sample.type=="Unacidified") %>%
rename("d13C.total"="d13C.permil",
"%C.total"="%C") %>%
select(-sample.type)
acidified.df <- mean.df %>%
filter(sample.type=="Acidified") %>%
rename("d13C.organic"="d13C.permil",
"%C.organic"="%C") %>%
select(-c('sample.type',"%N","d15N.permil"))
# combine data ------------------------------------------------------------
iso.df <- full_join(unacidified.df,acidified.df)
iso.df <- left_join(iso.df,n.df)
iso.df <- left_join(iso.df,P.df)
iso.df <- left_join(iso.df,silica.df)
# final calculations ------------------------------------------------------
iso.df$NP <- iso.df$`%N`/iso.df$P.total
iso.df$CN <- iso.df$`%C.total`/iso.df$`%N`
iso.df$SiP <- iso.df$SiO2.prct/iso.df$P.total
iso.df["SiP"][iso.df["SiP"]<0] <- NA
iso.df$P.total <- iso.df$P.total*100
iso.df$location <- factor(iso.df$location,levels=c("North","Middle","South"))
iso.df <- left_join(iso.df,dates.df)
# date shift --------------------------------------------------------------
date_shift <- TRUE
if (date_shift==TRUE){
for (row in 1:nrow(iso.df)){
if (iso.df[row,"location"]=="South"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+12
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+12
}
if (iso.df[row,"location"]=="North"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+4
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+4
}
}
}
View(iso.df)
mydata.df <- read_excel("raw/isotopes_09072022.xlsx") %>%
filter(ignore==FALSE)
View(mydata.df)
bulk.df <- read_excel("raw/data_08232022.xlsx",sheet="bulk density")
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
# import data -------------------------------------------------------------
load("Rdata/silica.Rdata")
dates.df <- read_csv("raw/core_dating_2.csv", show_col_types=FALSE) %>%
mutate_if(is.character,as.factor)
dates.df$date.depth.cm <- dates.df$depth.cm
mydata.df <- read_excel("raw/isotopes_09072022.xlsx") %>%
filter(ignore==FALSE) %>%
select(c("location","depth.cm","sample.type","%N","d15N.permil","%C","d13C.permil")) %>%
mutate(across(all_of(c("location","sample.type")),as.factor))
P.df <- read_excel("raw/data_08232022.xlsx",sheet="phosphorus")
bulk.df <- read_excel("raw/data_08232022.xlsx",sheet="bulk density")
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
# import data -------------------------------------------------------------
load("Rdata/silica.Rdata")
dates.df <- read_csv("raw/core_dating_2.csv", show_col_types=FALSE) %>%
mutate_if(is.character,as.factor)
dates.df$date.depth.cm <- dates.df$depth.cm
mydata.df <- read_excel("raw/isotopes_09072022.xlsx") %>%
filter(ignore==FALSE) %>%
select(c("location","depth.cm","sample.type","%N","d15N.permil","%C","d13C.permil")) %>%
mutate(across(all_of(c("location","sample.type")),as.factor))
P.df <- read_excel("raw/data_08232022.xlsx",sheet="phosphorus")
bulk.df <- read_excel("raw/data_08232022.xlsx",sheet="bulk density")
# caluclate n and means ---------------------------------------------------
n.df <- mydata.df %>%
filter(sample.type=="Acidified") %>%
group_by(location,sample.type,depth.cm) %>%
count() %>%
ungroup() %>%
select(-sample.type)
mean.df <- mydata.df %>%
group_by(location,sample.type,depth.cm) %>%
summarize_all(mean,na.rm=TRUE) %>%
ungroup()
# split acidified and unacidified -----------------------------------------
unacidified.df <- mean.df %>%
filter(sample.type=="Unacidified") %>%
rename("d13C.total"="d13C.permil",
"%C.total"="%C") %>%
select(-sample.type)
acidified.df <- mean.df %>%
filter(sample.type=="Acidified") %>%
rename("d13C.organic"="d13C.permil",
"%C.organic"="%C") %>%
select(-c('sample.type',"%N","d15N.permil"))
# combine data ------------------------------------------------------------
iso.df <- full_join(unacidified.df,acidified.df)
iso.df <- left_join(iso.df,n.df)
iso.df <- left_join(iso.df,P.df)
iso.df <- left_join(iso.df,silica.df)
iso.df <- left_join(iso.df,bulk.df)
# final calculations ------------------------------------------------------
iso.df$NP <- iso.df$`%N`/iso.df$P.total
iso.df$CN <- iso.df$`%C.total`/iso.df$`%N`
iso.df$SiP <- iso.df$SiO2.prct/iso.df$P.total
iso.df["SiP"][iso.df["SiP"]<0] <- NA
iso.df$P.total <- iso.df$P.total*100
iso.df$location <- factor(iso.df$location,levels=c("North","Middle","South"))
iso.df <- left_join(iso.df,dates.df)
# date shift --------------------------------------------------------------
date_shift <- TRUE
if (date_shift==TRUE){
for (row in 1:nrow(iso.df)){
if (iso.df[row,"location"]=="South"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+12
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+12
}
if (iso.df[row,"location"]=="North"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+4
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+4
}
}
}
View(iso.df)
iso.df <- iso.df %>%
mutate(N.storage=0.24*bulk.density*`%N`)
save(iso.df,file="Rdata/iso.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/graph_isotopes.R", echo=TRUE)
