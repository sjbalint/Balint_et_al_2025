scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.total", "P.org","NP","CN","SiO2.prct","SiP",
"N.storage","year.mean","clay.pct","sand.pct","gravel.pct"),
factor=as.character(
c(
bquote("Location"),
bquote(atop("Depth","(cm)")),
bquote("%"*"N"),
bquote(delta^15*N~'(‰)'),
bquote("%"*C[Total]),
bquote(delta^13*C[Total]~'(‰)'),
bquote("%"*C[Organic]),
bquote(delta^13*C[Organic]~'(‰)'),
bquote("Count"),
bquote("%"*P[inorg]),
bquote(P[Total]~x~10^-2~'(%)'),
bquote("%"*P[organic]),
bquote("N:P"~"Ratio"),
bquote("C:N"~"Ratio"),
bquote("Si"*O[2]~"(%)"),
bquote("BSi:P"~"Ratio"),
bquote("N"~"Accumulation"~"Rate"),
bquote("Year"),
bquote("Clay"~"(%)"),
bquote("Sand"~"(%)"),
bquote("Gravel"~"(%)")
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("location","value","factor","year.mean")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
#plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
# remove problamatic values -----------------------------------------------
temp.df <- data.df%>%
filter(depth.cm!=0)
for (row in 1:nrow(temp.df)){
if (temp.df[row,"NP"]<0 | temp.df[row,"NP"]>40){
temp.df[row,"NP"] <- NA
}
if (temp.df[row,"CN"]>40){
temp.df[row,"CN"] <- NA
}
if (is.na(temp.df[row,"%C.organic"])==FALSE & temp.df[row,"%C.organic"] >10){
temp.df[row,"%C.organic"] <- NA
}
if (is.na(temp.df[row,"%N"])==FALSE & temp.df[row,"%N"]>0.7){
temp.df[row,"%N"] <- NA
}
}
data.df <- temp.df
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(data.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
library(ggsci)
# import data -------------------------------------------------------------
load("Rdata/compiled_data.Rdata")
date_lines.df <- data.df %>%
select(location,year.mean,end.pb,cs.peak) %>%
filter(!is.na(end.pb) | !is.na(cs.peak))
for (row in 1:nrow(date_lines.df)){
if (!is.na(date_lines.df[row,"end.pb"])){
date_lines.df[row,"type"] <- "Pb-210 Minimum"
}
if (!is.na(date_lines.df[row,"cs.peak"])){
date_lines.df[row,"type"] <- "Cs-237 Maximum"
}
}
# graphing parameters -----------------------------------------------------
mywidth=10
myheight=6
legend_title <- NULL
basetheme <- list(
theme_classic(),
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
#panel.grid.major.x = element_line(color="grey"),
#panel.grid.major.y = element_line(color="grey"),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "top")
)
mytheme <- list(
basetheme,
geom_hline(data=date_lines.df,aes(yintercept=year.mean,color=location, linetype=type)),
#geom_label(aes(x=date.depth.cm,y=date.value,label=date.bottom),
#fill="white",label.size = NA, hjust = 0.8),
geom_smooth(aes(y=year.mean, x=value, color=location),se=FALSE, orientation="y"),
#geom_line(aes(x=year.mean,y=value,color=location)),
geom_errorbar(aes(x=value,ymin=year.min,ymax=year.max,color=location),alpha=0.3),
#geom_ribbon(aes(xmin=year.min,xmax=year.max,y=value,fill=location), ,alpha=0.1),
geom_point(aes(y=year.mean, x=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
facet_wrap(~factor,nrow=1,scales="free_x",strip.position = "bottom",labeller = label_parsed),
labs(x=NULL,y="Year",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1)),
scale_y_continuous(breaks=c(2000,1900,1800,1700),
labels=c("2000","1900","1800","~1700"))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.total", "P.org","NP","CN","SiO2.prct","SiP",
"N.storage","year.mean","clay.pct","sand.pct","gravel.pct"),
factor=as.character(
c(
bquote("Location"),
bquote(atop("Depth","(cm)")),
bquote("%"*"N"),
bquote(delta^15*N~'(‰)'),
bquote("%"*C[Total]),
bquote(delta^13*C[Total]~'(‰)'),
bquote("%"*C[Organic]),
bquote(delta^13*C[Organic]~'(‰)'),
bquote("Count"),
bquote("%"*P[inorg]),
bquote(P[Total]~x~10^-2~'(%)'),
bquote("%"*P[organic]),
bquote("N:P"~"Ratio"),
bquote("C:N"~"Ratio"),
bquote("Si"*O[2]~"(%)"),
bquote("BSi:P"~"Ratio"),
bquote("N"~"Accumulation"~"Rate"),
bquote("Year"),
bquote("Clay"~"(%)"),
bquote("Sand"~"(%)"),
bquote("Gravel"~"(%)")
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("location","value","factor","year.mean")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
#plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
# remove problamatic values -----------------------------------------------
temp.df <- data.df%>%
filter(depth.cm!=0)
for (row in 1:nrow(temp.df)){
if (temp.df[row,"NP"]<0 | temp.df[row,"NP"]>40){
temp.df[row,"NP"] <- NA
}
if (temp.df[row,"CN"]>40){
temp.df[row,"CN"] <- NA
}
if (is.na(temp.df[row,"%C.organic"])==FALSE & temp.df[row,"%C.organic"] >10){
temp.df[row,"%C.organic"] <- NA
}
if (is.na(temp.df[row,"%N"])==FALSE & temp.df[row,"%N"]>0.7){
temp.df[row,"%N"] <- NA
}
}
data.df <- temp.df
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(data.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
# import data -------------------------------------------------------------
load("Rdata/silica.Rdata")
load("Rdata/isotopes.Rdata")
load("Rdata/dating.Rdata")
load("Rdata/grainsize.Rdata")
P.df <- read.csv("raw/phosphorus.csv")
bulk.df <- read.csv("raw/bulk_density.csv")
# summarize grainsize data ------------------------------------------------
grain.df <- grain.df %>%
select(location,depth.cm,class.pct,class.rough) %>%
group_by(location,depth.cm,class.rough) %>%
summarize_all(sum) %>%
ungroup() %>%
pivot_wider(names_from=class.rough,values_from=class.pct)
colnames(grain.df) <- c("location","depth.cm","clay.pct","gravel.pct","sand.pct")
# combine data ------------------------------------------------------------
data.df <- left_join(isotopes.df,P.df)
data.df <- left_join(data.df,silica.df)
data.df <- left_join(data.df,bulk.df)
data.df <- left_join(data.df,grain.df)
data.df <- left_join(data.df,dating.df)
# final calculations ------------------------------------------------------
data.df$NP <- data.df$`%N`/data.df$P.pct.total
data.df$CN <- data.df$`%C.total`/data.df$`%N`
data.df$SiP <- data.df$SiO2.prct/data.df$P.pct.total
data.df["SiP"][data.df["SiP"]<0] <- NA
data.df$P.total <- data.df$P.pct.total*100
data.df <- data.df %>%
mutate(location=factor(location,levels=c("North","Middle","South"))) %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.integer,as.numeric) %>%
as.data.frame
# date shift --------------------------------------------------------------
date_shift <- FALSE
if (date_shift==TRUE){
for (row in 1:nrow(data.df)){
if (data.df[row,"location"]=="South"){
data.df[row,"depth.cm"] <- data.df[row,"depth.cm"]+12
data.df[row,"date.depth.cm"] <- data.df[row,"date.depth.cm"]+12
}
if (data.df[row,"location"]=="North"){
data.df[row,"depth.cm"] <- data.df[row,"depth.cm"]+4
data.df[row,"date.depth.cm"] <- data.df[row,"date.depth.cm"]+4
}
}
}
str(data.df)
data.df <- data.df %>%
mutate(N.storage=0.24*bulk.density.g.cm*`%N`,
median.grainsize.phi=log2(median.grainsize.um))
str(data.df)
save(data.df,file="Rdata/compiled_data.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
# import data -------------------------------------------------------------
load("Rdata/silica.Rdata")
load("Rdata/isotopes.Rdata")
load("Rdata/dating.Rdata")
load("Rdata/grainsize.Rdata")
P.df <- read.csv("raw/phosphorus.csv")
bulk.df <- read.csv("raw/bulk_density.csv")
# summarize grainsize data ------------------------------------------------
grain.df <- grain.df %>%
select(location,depth.cm,class.pct,class.rough) %>%
group_by(location,depth.cm,class.rough) %>%
summarize_all(sum) %>%
ungroup() %>%
pivot_wider(names_from=class.rough,values_from=class.pct)
colnames(grain.df) <- c("location","depth.cm","clay.pct","gravel.pct","sand.pct")
# combine data ------------------------------------------------------------
data.df <- left_join(isotopes.df,P.df)
data.df <- left_join(data.df,silica.df)
data.df <- left_join(data.df,bulk.df)
data.df <- left_join(data.df,grain.df)
data.df <- left_join(data.df,dating.df)
# final calculations ------------------------------------------------------
data.df$NP <- data.df$`%N`/data.df$P.pct.total
data.df$CN <- data.df$`%C.total`/data.df$`%N`
data.df$SiP <- data.df$SiO2.prct/data.df$P.pct.total
data.df["SiP"][data.df["SiP"]<0] <- NA
data.df$P.total <- data.df$P.pct.total*100
data.df <- data.df %>%
mutate(location=factor(location,levels=c("North","Middle","South"))) %>%
mutate_if(is.character, as.numeric) %>%
mutate_if(is.integer,as.numeric) %>%
as.data.frame
# date shift --------------------------------------------------------------
date_shift <- FALSE
if (date_shift==TRUE){
for (row in 1:nrow(data.df)){
if (data.df[row,"location"]=="South"){
data.df[row,"depth.cm"] <- data.df[row,"depth.cm"]+12
data.df[row,"date.depth.cm"] <- data.df[row,"date.depth.cm"]+12
}
if (data.df[row,"location"]=="North"){
data.df[row,"depth.cm"] <- data.df[row,"depth.cm"]+4
data.df[row,"date.depth.cm"] <- data.df[row,"date.depth.cm"]+4
}
}
}
View(data.df)
data.df <- data.df %>%
mutate(N.storage=0.24*bulk.density.g.cm*`%N`,
median.grainsize.phi=log2(median.grainsize.um),
accretion.rate.gcm3yr=accretion.rate.cmyr*bulk.density.g.cm)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_stats.R", echo=TRUE)
kable(summary.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_stats.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
View(data.df)
write.csv(data.df,"output/compiled_data_BALINT.csv")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
write.csv(data.df,"output/compiled_data_BALINT_03262023.csv",rownames=FALSE)
write.csv(data.df,"output/compiled_data_BALINT_03262023.csv",row.names=FALSE)
View(isotopes.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
View(temp.df)
str(temp.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/configure_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/configure_graphing.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
library(ggsci)
# import data -------------------------------------------------------------
load("Rdata/compiled_data.Rdata")
date_lines.df <- data.df %>%
select(location,year.mean,end.pb,cs.peak) %>%
filter(!is.na(end.pb) | !is.na(cs.peak))
for (row in 1:nrow(date_lines.df)){
if (!is.na(date_lines.df[row,"end.pb"])){
date_lines.df[row,"type"] <- "Pb-210 Minimum"
}
if (!is.na(date_lines.df[row,"cs.peak"])){
date_lines.df[row,"type"] <- "Cs-237 Maximum"
}
}
# graphing parameters -----------------------------------------------------
mywidth=10
myheight=6
legend_title <- NULL
#import base graphing theme
load("Rdata/basetheme.Rdata")
mytheme <- list(
basetheme,
geom_hline(data=date_lines.df,aes(yintercept=year.mean,color=location, linetype=type)),
#geom_label(aes(x=date.depth.cm,y=date.value,label=date.bottom),
#fill="white",label.size = NA, hjust = 0.8),
geom_smooth(aes(y=year.mean, x=value, color=location),se=FALSE, orientation="y"),
#geom_line(aes(x=year.mean,y=value,color=location)),
geom_errorbar(aes(x=value,ymin=year.min,ymax=year.max,color=location),alpha=0.3),
#geom_ribbon(aes(xmin=year.min,xmax=year.max,y=value,fill=location), ,alpha=0.1),
geom_point(aes(y=year.mean, x=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
facet_wrap(~factor,nrow=1,scales="free_x",strip.position = "top",labeller = label_parsed),
labs(x=NULL,y="Year",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1)),
scale_y_continuous(breaks=c(2000,1900,1800,1700),
labels=c("2000","1900","1800","Colonial\nPeriod"))
)
#import ylabels.df for the plot_longer function
load("Rdata/graphing_labels.Rdata")
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
return (plot.df)
}
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
colnames(data.df)
ggplot(data.df,aes(x=SiO2.prct,y=d15N))+
mytheme
mytheme <- list(
basetheme,
geom_point(aes(y=year.mean, x=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
labs(x=NULL,y="Year",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1)),
scale_y_continuous(breaks=c(2000,1900,1800,1700),
labels=c("2000","1900","1800","Colonial\nPeriod"))
)
ggplot(data.df,aes(x=SiO2.prct,y=d15N))+
mytheme
mytheme <- list(
basetheme,
geom_point(aes(fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
labs(shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1)),
scale_y_continuous(breaks=c(2000,1900,1800,1700),
labels=c("2000","1900","1800","Colonial\nPeriod"))
)
ggplot(data.df,aes(x=SiO2.prct,y=d15N))+
mytheme
ggplot(data.df,aes(x=SiO2.prct,y=d15N,permil))+
mytheme
ggplot(data.df,aes(x=SiO2.prct,y=d15N.permil))+
mytheme
ggplot(data.df,aes(x=d15N.permil,y=SiO2.prct))+
mytheme
mytheme <- list(
basetheme,
geom_point(aes(fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
labs(shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ggplot(data.df,aes(x=d15N.permil,y=SiO2.prct))+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
plot.df <- plot_longer(data.df,c("d15N.permil","%N"))
ggplot(plot.df)+
mytheme
plot.df <- plot_longer(data.df,c("d15N.permil","%N","N.P.ratio"))
ggplot(plot.df)+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/parse_grainsize_manually.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
plot.df <- plot_longer(data.df,c("d13c.permil","%C.organic","C.N.ratio"))
colnames(data.sd)
colnames(data.df)
plot.df <- plot_longer(data.df,c("d13C.permil","%C.organic","C.N.ratio"))
ggplot(plot.df)+
mytheme
plot.df <- plot_longer(data.df,c("d13C.permil","%C.organic","C.N.ratio"))
plot.df <- plot_longer(data.df,c("d13C.organic","%C.organic","C.N.ratio"))
ggplot(plot.df)+
mytheme
ggsave("figures/Si/carbon.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/configure_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
colnames(data.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/Si_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
temp.df <- plot_longer(data.df,c("SiO2.prct","Si.P.ratio","Si.N.ratio"))
line_factors <- temp.df$factor %>%
unique()
ggplot(temp.df)+
mytheme
ggsave("figures/Si_ratios.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/configure_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/configure_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
