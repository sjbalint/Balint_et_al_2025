#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_viridis_d(option="cividis",end=0.7)+
scale_color_viridis_d(option="cividis",end=0.7)
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_fill_viridis_d(option="cividis",end=0.7)+
scale_color_viridis_d(option="cividis",end=0.7)
plot <- plot_grid(p1,p2,ncol=1,align = "v",rel_heights=c(1,2))
ggdraw(plot)
ggsave(plot=plot,"figures/timeline.png",width=8, height=8)
#plot of population
p1 <- ggplot(population.df,aes(Year,Population.Thousand,fill=Region))+
#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_grey(start=0.7,end=0.9)+
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_fill_jco(c(4:6))+
scale_color_jco()
?scale_color_jco()
timeline.df$Year <- timeline.df$date
#plot of population
p1 <- ggplot(population.df,aes(Year,Population.Thousand,fill=Region))+
#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_grey(start=0.7,end=0.9)+
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_color_uchicago()+
scale_fill_uchicago()
plot <- plot_grid(p1,p2,ncol=1,align = "v",rel_heights=c(1,2))
ggdraw(plot)
ggsave(plot=plot,"figures/timeline.png",width=8, height=8)
?scale_color_uchicago
#plot of population
p1 <- ggplot(population.df,aes(Year,Population.Thousand,fill=Region))+
#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_grey(start=0.7,end=0.9)+
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_color_uchicago(pallete="dark")+
scale_fill_uchicago(pallete="dark")
#plot of population
p1 <- ggplot(population.df,aes(Year,Population.Thousand,fill=Region))+
#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_grey(start=0.7,end=0.9)+
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_color_uchicago(palette="dark")+
scale_fill_uchicago(palette="dark")
plot <- plot_grid(p1,p2,ncol=1,align = "v",rel_heights=c(1,2))
ggdraw(plot)
ggsave(plot=plot,"figures/timeline.png",width=8, height=8)
#plot of population
p1 <- ggplot(population.df,aes(Year,Population.Thousand,fill=Region))+
#geom_col(color="black")+
geom_col(data=subset(population.df,Region=="County"),aes(fill="Washington County"), color="black")+
geom_col(data=subset(population.df,Region=="Tract"),aes(fill="U.S. Census Tract"),color="black")+
labs(y=bquote("Population"~10^3))+
theme_classic()+
#remove x axis
theme(axis.title.x=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position=c(.2,.8))+
scale_fill_grey(start=0.7,end=0.9)+
labs(fill=NULL)
#timeline
p2 <- ggplot(timeline.df,aes(x=Year,y=position, label=description))+
geom_hline(yintercept=0, color = "black", size=0.7)+
geom_segment(aes(yend=0,xend=date), color='black', size=0.2)+
geom_point(aes(shape=type,fill=type),size=3)+
geom_text(data=date_range.df, aes(x=date_range,y=-0.5, label=date_range),size=3.5, color='black', angle=0)+
geom_text(aes(y=text_position, color=type), size=3.5, vjust=0.3, show.legend=FALSE)+
theme_classic()+
theme(axis.line.y=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
axis.text.x =element_blank(),
axis.ticks.x =element_blank(),
axis.line.x =element_blank(),
legend.position = "bottom",)+
scale_shape_manual(values=21:25)+
labs(fill=NULL, shape=NULL)+
scale_color_uchicago(palette="light")+
scale_fill_uchicago(palette="light")
plot <- plot_grid(p1,p2,ncol=1,align = "v",rel_heights=c(1,2))
ggdraw(plot)
ggsave(plot=plot,"figures/timeline.png",width=8, height=8)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/timeline.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/timeline.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_stats.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_stats.R", echo=TRUE)
response.list <- c(normal.list,abnormal.list)
regression.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(regression.df)){
response <- response.list[row]
regression.df[row,"response"] <- response
lm <- lm(get(response)~depth.cm,data=data.df)
n <- data.df %>%
select(c("depth.cm",response)) %>%
drop_na() %>%
count()
regression.df[row,"regression.n"] <- n
regression.df[row,"regression.r.squared"] <- summary(lm)$r.squared
regression.df[row,"regression.p.value"] <- summary(lm)$coefficients[2,4]
regression.df[row,"regression.slope"] <- summary(lm)$coefficients[2,1]
if (regression.df[row,"regression.p.value"]<alpha){
regression.df[row,"regression.significance"] <- TRUE
} else {
regression.df[row,"regression.significance"] <- FALSE
}
}
kable(regression.df)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(knitr)
library(car)
library(dunn.test)
# import data -------------------------------------------------------------
load("Rdata/compiled_data.Rdata")
# remove problamatic values -----------------------------------------------
temp.df <- data.df %>%
filter(depth.cm!=0)
data.df <- temp.df
for (row in 1:nrow(temp.df)){
if (temp.df[row,"NP"]<0 | temp.df[row,"NP"]>40){
temp.df[row,"NP"] <- NA
}
if (temp.df[row,"CN"]>40){
temp.df[row,"CN"] <- NA
}
if (is.na(temp.df[row,"%C.organic"])==FALSE & temp.df[row,"%C.organic"] >10){
temp.df[row,"%C.organic"] <- NA
}
if (is.na(temp.df[row,"%N"])==FALSE & temp.df[row,"%N"]>0.7){
temp.df[row,"%N"] <- NA
}
}
# create a date (depth) threshold -----------------------------------------
threshold <- 30
for (row in 1:nrow(data.df)){
ifelse(data.df[row,"depth.cm"]< threshold,
data.df[row,"class"] <- "top",data.df[row,"class"] <- "bottom")
}
# configure stats ---------------------------------------------------------
alpha=0.05
predictor.list <- c("location")
response.list <- c("%C.organic","%N","P.total","SiO2.prct","CN","NP","SiP","d15N.permil","d13C.organic")
# test for normality ------------------------------------------------------
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
normal.list <- shapiro.df %>%
filter(normal==TRUE) %>%
select(response) %>%
pull
abnormal.list <- shapiro.df %>%
filter(normal==FALSE) %>%
select(response) %>%
pull
kable(shapiro.df)
# normal data -------------------------------------------------------------
if (length(normal.list)>0){
response.list <- normal.list
anova.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor]))[[1]][1, 5]
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
}
}
kable(anova.df)
}
# post-hoc testing --------------------------------------------------------
if (length(normal.list)>0){
tukey.df <- anova.df %>%
filter(anova.significance==TRUE) %>%
select(c("response","predictor"))
if (nrow(tukey.df)>0){
tukey.results.df <- tukey.df
for (row in 1:nrow(tukey.df)){
response <- tukey.df[row,"response"]
predictor <- tukey.df[row,"predictor"]
thsd <- TukeyHSD(aov(data.df[,response] ~ data.df[,predictor]))
temp.df <- data.frame(dimnames(thsd$`data.df[, predictor]`)[1], thsd$`data.df[, predictor]`[4])
colnames(temp.df) <- c("comparison","tukey.p.value")
temp.df$response <- tukey.df[row,"response"]
temp.df$predictor <- tukey.df[row,"predictor"]
tukey.results.df <- full_join(tukey.results.df,temp.df)
}
tukey.df <- tukey.results.df %>%
drop_na(tukey.p.value)
for (row in 1:nrow(tukey.df)){
if (tukey.df[row,"tukey.p.value"]<alpha/2){
tukey.df[row,"tukey.significance"] <- TRUE
} else {
tukey.df[row,"tukey.significance"] <- FALSE
}
}
tukey.results.df <- tukey.df %>%
filter(tukey.significance==TRUE)
kable(tukey.results.df)
}
}
# abnormal data -----------------------------------------------------------
if (length(abnormal.list)>0){
response.list <- abnormal.list
kruskal.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
kruskal.df[row,"response"] <- response
kruskal.df[row,"predictor"] <- predictor
kruskal.df[row,"levene.p.value"] <- leveneTest(data.df[,response], data.df[,predictor])$`Pr(>F)`[1]
if (kruskal.df[row,"levene.p.value"]>alpha){
kruskal.df[row,"equal.variance"] <- TRUE
} else {
kruskal.df[row,"equal.variance"] <- FALSE
}
kruskal.df[row,"kruskal.p.value"] <- kruskal.test(data.df[,response],data.df[,predictor])$p.value
if (kruskal.df[row,"kruskal.p.value"]<alpha){
kruskal.df[row,"kruskal.significance"] <- TRUE
} else {
kruskal.df[row,"kruskal.significance"] <- FALSE
}
if (kruskal.df[row,"equal.variance"]==FALSE){
kruskal.df[row,"kruskal.p.value"] <- NA
kruskal.df[row,"kruskal.significance"] <- NA
}
}
}
kable(kruskal.df)
}
# post-hoc testing --------------------------------------------------------
if (length(abnormal.list)>0){
dunn.df <- kruskal.df %>%
filter(kruskal.significance==TRUE) %>%
select(c("response","predictor"))
dunn.results.df <- dunn.df
for (row in 1:nrow(dunn.df)){
response <- dunn.df[row,"response"]
predictor <- dunn.df[row,"predictor"]
dt <- dunn.test(data.df[,response],data.df[,predictor],method="bonferroni",
kw=FALSE, table=FALSE)
n <- data.df %>%
select(c("depth.cm",response)) %>%
drop_na() %>%
count()
temp.df <- data.frame(dt$comparisons, dt$P.adjusted)
colnames(temp.df) <- c("comparison","dunn.p.value")
temp.df$response <- dunn.df[row,"response"]
temp.df$predictor <- dunn.df[row,"predictor"]
temp.df$dunn.n <- n
dunn.results.df <- full_join(dunn.results.df,temp.df)
}
dunn.df <- dunn.results.df %>%
drop_na(dunn.p.value)
for (row in 1:nrow(dunn.df)){
if (dunn.df[row,"dunn.p.value"]<alpha/2){
dunn.df[row,"dunn.significance"] <- TRUE
} else {
dunn.df[row,"dunn.significance"] <- FALSE
}
}
dunn.results.df <- dunn.df %>%
filter(dunn.significance==TRUE)
kable(dunn.results.df)
}
n <- data.df %>%
select(c("depth.cm",response)) %>%
drop_na() %>%
count()
View(n)
temp.df <- data.frame(dt$comparisons, dt$P.adjusted)
colnames(temp.df) <- c("comparison","dunn.p.value")
temp.df$response <- dunn.df[row,"response"]
temp.df$predictor <- dunn.df[row,"predictor"]
temp.df$dunn.n <- n
temp.df$dunn.n <- as.numeric(n)
if (length(abnormal.list)>0){
dunn.df <- kruskal.df %>%
filter(kruskal.significance==TRUE) %>%
select(c("response","predictor"))
dunn.results.df <- dunn.df
for (row in 1:nrow(dunn.df)){
response <- dunn.df[row,"response"]
predictor <- dunn.df[row,"predictor"]
dt <- dunn.test(data.df[,response],data.df[,predictor],method="bonferroni",
kw=FALSE, table=FALSE)
n <- data.df %>%
select(c("depth.cm",response)) %>%
drop_na() %>%
count() %>%
as.numeric()
temp.df <- data.frame(dt$comparisons, dt$P.adjusted)
colnames(temp.df) <- c("comparison","dunn.p.value")
temp.df$response <- dunn.df[row,"response"]
temp.df$predictor <- dunn.df[row,"predictor"]
temp.df$dunn.n <- n
dunn.results.df <- full_join(dunn.results.df,temp.df)
}
dunn.df <- dunn.results.df %>%
drop_na(dunn.p.value)
for (row in 1:nrow(dunn.df)){
if (dunn.df[row,"dunn.p.value"]<alpha/2){
dunn.df[row,"dunn.significance"] <- TRUE
} else {
dunn.df[row,"dunn.significance"] <- FALSE
}
}
dunn.results.df <- dunn.df %>%
filter(dunn.significance==TRUE)
kable(dunn.results.df)
}
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_stats.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
dates.df <- plot.df[,c("location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
plot.df <- plot_longer(data.df,c("d13C.organic","d15N.permil"))
dates.df <- plot.df[,c("location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
View(dates.df)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
plot.df <- left_join(plot.df,dates.df)
View(plot.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/data parsing/wrangle_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", echo=TRUE)
