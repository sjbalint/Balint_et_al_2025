grain.df <- left_join(grain.df,mysizes.df)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
scale_fill_viridis_d()+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="gray"),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
scale_color_viridis_d()+
scale_fill_viridis_d()+
scale_shape_manual(values=c(21:24))
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
scale_fill_viridis_d()+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
scale_color_viridis_d()+
scale_fill_viridis_d()+
scale_shape_manual(values=c(21:24))
ggsave("figures/grainsize.png",width=8, height=4.5)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_vline(data=c(0,25,50,75,100))+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
scale_color_viridis_d(option="H")+
scale_fill_viridis_d(option="H")+
scale_shape_manual(values=c(21:24))
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_hline(yintercept=0)+
geom_hline(yintercept=25)+
geom_hline(yintercept=50)+
geom_hline(yintercept=75)+
geom_hline(yintercept=100)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
scale_color_viridis_d(option="H")+
scale_fill_viridis_d(option="H")+
scale_shape_manual(values=c(21:24))
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_hline(yintercept=0)+
geom_hline(yintercept=.25)+
geom_hline(yintercept=.5)+
geom_hline(yintercept=.75)+
geom_hline(yintercept=1)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
scale_color_viridis_d(option="H")+
scale_fill_viridis_d(option="H")+
scale_shape_manual(values=c(21:24))
ggsave("figures/grainsize.png",width=8, height=4.5)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
View(iso.df)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
str(data.df)
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
data.df[,response]
as.numeric(data.df[,response])
View(data.df)
str(data.df)
data.df <- data.frame(data.df)
response.list <- c("C.org","N")
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
alpha=0.05
response.list <- c("C.org","N")
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
kable(shapiro.df) #responses are not normal or lognormal
require(knitr)
kable(shapiro.df) #responses are not normal or lognormal
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
require(car)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("L:/Public/Sawyer Balint/RStudio/wickford_cores/core_stats.R", echo=TRUE)
alpha=0.05
response.list <- c("C.org","N","P.total","CN","NP","d15N","d13C.org")
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
kable(shapiro.df)
str(shapiro.df)
normal.list <- shapiro.df %>%
filter(normal==TRUE) %>%
select(response)
normal.list <- shapiro.df %>%
filter(normal==TRUE) %>%
select(response) %>%
pull
abnormal.list <- shapiro.df %>%
filter(normal==FALSE) %>%
select(response) %>%
pull
predictor.list <- c("location")
response.list <- normal.list
anova.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov.test(data.df[,response],data.df[,predictor])$p.value
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(data.df[,response],data.df[,predictor])$p.value
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
row <- 0
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(data.df[,response],data.df[,predictor])$p.value
aov(data.df[,response],data.df[,predictor])
data.df[,response]
data.df[,predictor]
anova.df[row,"anova.p.value"] <- aov(data.df[,response] ~data.df[,predictor])$p.value
anova.df[row,"anova.p.value"] <- aov(response ~ predictor, data=data.df)$p.value
anova.df[row,"anova.p.value"] <- aov(get(response) ~ get(predictor), data=data.df)$p.value
View(anova.df)
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(response ~ predictor, data=data.df)$p.value
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
response
anova.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(response ~ predictor, data=data.df)$p.value
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
View(anova.df)
aov(response ~ predictor, data=data.df)
aov(get(response) ~ get(predictor), data=data.df)
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(get(response) ~ get(predictor), data=data.df)$p.value
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
aov(get(response) ~ get(predictor), data=data.df)$p.value
aov(get(response) ~ get(predictor), data=data.df)
temp <- aov(get(response) ~ get(predictor), data=data.df)$p.value
temp <- aov(get(response) ~ get(predictor), data=data.df)
View(temp)
summary(temp)
anova.df[row,"anova.p.value"] <- aov(data.df[,response] ~ data.df[,predictor])$p.value
aov(data.df[,response] ~ data.df[,predictor])
data.df[,response]
summary(aov(data.df[,response] ~ data.df[,predictor]))
temp <- summary(aov(data.df[,response] ~ data.df[,predictor]))
View(temp)
anova.df[row,"anova.p.value"] <- aov(data.df[,response] ~ data.df[,predictor])$`Pr(>F)`
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor])$`Pr(>F)`)
summary(aov(data.df[,response] ~ data.df[,predictor])$`Pr(>F)`)
summary(aov(data.df[,response] ~ data.df[,predictor]))$`Pr(>F)`
summary(aov(data.df[,response] ~ data.df[,predictor]))
str(temp)
summary(aov(data.df[,response] ~ data.df[,predictor]))$` Pr(>F)`
temp <- aov(data.df[,response] ~ data.df[,predictor]))
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
require(tidyverse)
require(readxl)
require(progress)
require(knitr)
require(car)
# import data -------------------------------------------------------------
data.df <- read_excel("data/isotopes_07082022.xlsx",sheet="isotopes")
P.df <- read_excel("data/isotopes_07082022.xlsx",sheet="phosphorus")
data.df <- left_join(data.df,P.df)
data.df$NP <- data.df$N/data.df$P.total
data.df$P.total <- data.df$P.total*100
data.df$location <- factor(data.df$location,levels=c("North","Middle","South"))
data.df <- data.frame(data.df)
# test for normality ------------------------------------------------------
alpha=0.05
response.list <- c("C.org","N","P.total","CN","NP","d15N","d13C.org")
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
normal.list <- shapiro.df %>%
filter(normal==TRUE) %>%
select(response) %>%
pull
abnormal.list <- shapiro.df %>%
filter(normal==FALSE) %>%
select(response) %>%
pull
kable(shapiro.df)
# normal data -------------------------------------------------------------
predictor.list <- c("location")
response.list <- normal.list
anova.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
temp <- aov(data.df[,response] ~ data.df[,predictor])
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- aov(data.df[,response] ~ data.df[,predictor])
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
temp <- aov(data.df[,response] ~ data.df[,predictor])
View(temp)
summary(temp)
summary(temp)[[1]][1, 5]
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor]))[[1]][1, 5]
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor]))[[1]][1, 5]
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
if (anova.df[row,"equal.variance"]==FALSE){
anova.df[row,"anova.p.value"] <- NA
anova.df[row,"anova.significance"] <- NA
}
}
}
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor]))[[1]][1, 5]
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
}
}
length(response.list)*length(predictor.list)
anova.df <- data.frame(matrix(ncol=0,nrow=length(response.list)*length(predictor.list)))
row <- 0
for (response in response.list){
for (predictor in predictor.list){
row <- row+1
anova.df[row,"response"] <- response
anova.df[row,"predictor"] <- predictor
anova.df[row,"anova.p.value"] <- summary(aov(data.df[,response] ~ data.df[,predictor]))[[1]][1, 5]
if (anova.df[row,"anova.p.value"]<alpha){
anova.df[row,"anova.significance"] <- TRUE
} else {
anova.df[row,"anova.significance"] <- FALSE
}
}
}
kable(anova.df)
alpha=0.05
response.list <- c("C.org","N","CN","NP","d15N","d13C.org")
shapiro.df <- data.frame(matrix(ncol=0,nrow=length(response.list)))
for (row in 1:nrow(shapiro.df)){
response <- response.list[row]
shapiro.df[row,"response"] <- response
shapiro.df[row,"shapiro.p.value"] <- shapiro.test(data.df[,response])$p.value
shapiro.df[row,"shapiro.log.p.value"] <- shapiro.test(log(abs(data.df[,response])))$p.value
if (shapiro.df[row,"shapiro.p.value"]>alpha){
shapiro.df[row,"normal"] <- TRUE
} else {
shapiro.df[row,"normal"] <- FALSE
}
if (shapiro.df[row,"shapiro.log.p.value"]>alpha){
shapiro.df[row,"lognormal"] <- TRUE
} else {
shapiro.df[row,"lognormal"] <- FALSE
}
}
normal.list <- shapiro.df %>%
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
