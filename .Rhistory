theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="gray"),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right"),
scale_color_viridis_d(),
scale_fill_viridis_d(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.org","NP","CN"),
factor=as.character(
c(
bquote(atop("Location")),
bquote(atop("Depth","(cm)")),
bquote(atop("%N")),
bquote(atop(delta^15*N,'(‰)')),
bquote(atop("%"*C[Total])),
bquote(atop(delta^13*C[Total],'(‰)')),
bquote(atop("%"*C[Organic])),
bquote(atop(delta^13*C[Organic],'(‰)')),
bquote(atop("Count")),
bquote(atop("%"*P[inorg])),
bquote(atop("%"*P[organic])),
bquote(atop("N:P","Ratio")),
bquote(atop("C:N","Ratio"))
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names)
return (plot.df)
}
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
load("Rdata/iso.Rdata")
# graphing parameters -----------------------------------------------------
theme_set(theme_classic())
mywidth=11
myheight=8.5
legend_title <- NULL
mytheme <- list(
geom_smooth(aes(x=depth.cm, y=value, color=location,
#linetype=location
),
se=FALSE),
geom_point(aes(x=depth.cm, y=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
coord_flip(),
scale_x_reverse(),
facet_wrap(~factor,nrow=1,scales="free_x",strip.position = "bottom",labeller = label_parsed),
labs(y=NULL,x="Depth\n(cm)",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_line(size=.1, color="gray"),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right"),
scale_color_viridis_d(),
scale_fill_viridis_d(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.org","NP","CN"),
factor=as.character(
c(
bquote("Location"),
bquote(atop("Depth","(cm)")),
bquote("%N"),
bquote(delta^15*N~'(‰)'),
bquote("%"*C[Total]),
bquote(delta^13*C[Total]~'(‰)'),
bquote("%"*C[Organic]),
bquote(delta^13*C[Organic]~'(‰)'),
bquote("Count"),
bquote("%"*P[inorg]),
bquote("%"*P[organic]),
bquote("N:P"~"Ratio"),
bquote("C:N"~"Ratio")
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names)
return (plot.df)
}
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
source("~/Sawyer Balint/RStudio/wickford_cores/isotope_data.R", echo=TRUE)
colnames(iso.df)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
View(temp.df)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
dates.df <- read.csv("data/core_dating.csv")
load("Rdata/iso.Rdata")
View(iso.df)
mydata.df <- iso.df %>%
select(location,depth.cm)
str(mydata.df)
str(dates.df)
dates.df <- read.csv("data/core_dating.csv",encoding="UTC-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
str(dates.df)
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
str(dates.df)
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
str(dates.df)
location.list <- dates.df %>%
pull(location) %>%
unique()
dates.df %>% lm(depth.cm,date.bottom)
dates.df %>% lm(depth.cm~date.bottom)
lm(depth.cm~date.bottom,dates.df)
lm(depth.cm~date.bottom,dates.df)[1]
lm(depth.cm~date.bottom,dates.df)[2]
lm(depth.cm~date.bottom,dates.df)$date.bottom
lm(depth.cm~date.bottom,dates.df)$coefficients[1]
lm(depth.cm~date.bottom,dates.df)$coefficients[2]
results.df <- data.frame()
for (location in location.list){
sub.df <- dates.df %>%
filter(location==location)
results.df$location <- location
results.df.df$slope <- lm(depth.cm~date.bottom,dates.df)$coefficients[2]
results.df.df$int <- lm(depth.cm~date.bottom,dates.df)$coefficients[1]
}
results.df <- data.frame()
for (location in location.list){
sub.df <- dates.df %>%
filter(location==location)
results.df[,"location"] <- location
results.df.df[,"slope"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[2]
results.df.df[,"int"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[1]
}
results.df[,"location"] <- location
results.df <- data.frame()
row <- 0
for (location in location.list){
sub.df <- dates.df %>%
filter(location==location)
row <- row+1
results.df[row,"location"] <- location
results.df.df[row,"slope"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[2]
results.df.df[row,"int"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[1]
}
results.df <- data.frame()
row <- 0
for (location in location.list){
sub.df <- dates.df %>%
filter(location==location)
row <- row+1
results.df[row,"location"] <- location
results.df[row,"slope"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[2]
results.df[row,"int"] <- lm(depth.cm~date.bottom,dates.df)$coefficients[1]
}
View(results.df)
results.df <- data.frame()
row <- 0
for (location in location.list){
sub.df <- dates.df %>%
filter(location==location)
row <- row+1
results.df[row,"location"] <- location
results.df[row,"slope"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[2]
results.df[row,"int"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[1]
}
View(results.df)
sub.df <- dates.df %>%
filter(location==location)
sub.df <- dates.df %>%
filter(location=location)
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[2]
results.df[row,"int"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[1]
}
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[2]
results.df[row,"int"] <- lm(depth.cm~date.bottom,sub.df)$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
View(mydata.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,date.bottom])==TRUE){
mydata.df[row,date.bottom] <-
mydata.df[row,depth.cm]*mydata.df[row,slope]+mydata.df[row,intercept]
}
}
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,date.bottom])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"intercept"]
}
}
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"intercept"]
}
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(date.bottom~depth.cm,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[2]
results.df[row,"int"] <- my.lm$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(depth.cm~date.bottom,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[2]
results.df[row,"int"] <- my.lm$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
my.lm$coefficients[2]
my.lm$coefficients[1]
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(depth.cm~date.bottom,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[1]
results.df[row,"int"] <- my.lm$coefficients[2]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
location.list <- dates.df %>%
pull(location) %>%
unique()
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(depth.cm~date.bottom,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[1]
results.df[row,"int"] <- my.lm$coefficients[2]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
location.list <- dates.df %>%
pull(location) %>%
unique()
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(depth.cm~date.bottom,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[2]
results.df[row,"int"] <- my.lm$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
mydata.df[row,"depth.cm"]*mydata.df[row,"slope"]+mydata.df[row,"int"]
}
}
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
# import data -------------------------------------------------------------
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
location.list <- dates.df %>%
pull(location) %>%
unique()
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(date.bottom~depth.cm,sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[2]
results.df[row,"int"] <- my.lm$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
(mydata.df[row,"depth.cm"]*mydata.df[row,"slope"])+mydata.df[row,"int"]
}
}
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
# import data -------------------------------------------------------------
dates.df <- read.csv("data/core_dating.csv",encoding="UTF-8")
load("Rdata/iso.Rdata")
mydata.df <- iso.df %>%
select(location,depth.cm)
location.list <- dates.df %>%
pull(location) %>%
unique()
results.df <- data.frame()
row <- 0
for (mylocation in location.list){
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(date.bottom~poly(depth.cm,2),sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"slope"] <- my.lm$coefficients[2]
results.df[row,"int"] <- my.lm$coefficients[1]
}
mydata.df <- left_join(mydata.df,results.df)
mydata.df <- left_join(mydata.df,dates.df)
for (row in 1:nrow(mydata.df)){
if (is.na(mydata.df[row,"date.bottom"])==TRUE){
mydata.df[row,"date.bottom"] <-
(mydata.df[row,"depth.cm"]*mydata.df[row,"slope"])+mydata.df[row,"int"]
}
}
mylm
my.lm
my.lm$coefficients[2]
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
my.lm
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
my.lm <- lm(date.bottom~poly(depth.cm,1),sub.df)
my.lm
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
my.lm
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
my.lm
mylocation <- "North"
sub.df <- dates.df %>%
filter(location==mylocation)
row <- row+1
my.lm <- lm(date.bottom~poly(depth.cm,3),sub.df)
results.df[row,"location"] <- mylocation
results.df[row,"x1"] <- my.lm$coefficients[2]
results.df[row,"x2"] <- my.lm$coefficients[3]
results.df[row,"b"] <- my.lm$coefficients[1]
my.lm
my.lm <- lm(date.bottom~poly(depth.cm,2),sub.df)
my.lm
sub.df
my.lm <- lm(date.bottom~poly(depth.cm,2,raw=TRUE),sub.df)
my.lm
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_dating.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/isotope_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
