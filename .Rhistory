mytheme
ggplot(temp.df)+
geom_vline(data=dates.df,aes(xintercept=depth.cm,color=location))+
geom_label(data=temp_dates.df,aes(x=depth.cm,y=value,label=date.bottom),fill="white",label.size = NA)+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
temp.df <- plot_longer(iso.df,c("CN","NP","d15N.permil"))
temp_dates.df <- plot_dates(dates.df,temp.df)
ggplot(temp.df)+
geom_vline(data=dates.df,aes(xintercept=depth.cm,color=location),show_guide = FALSE)+
geom_label(data=temp_dates.df,aes(x=depth.cm,y=value,label=date.bottom),
fill="white",label.size = NA, hjust = 0.5)+
mytheme
ggsave("figures/element_ratios.png",width=mywidth, height=myheight)
ggplot(temp.df)+
geom_vline(data=dates.df,aes(xintercept=depth.cm,color=location),show_guide = FALSE)+
geom_label(data=temp_dates.df,aes(x=depth.cm,y=value,label=date.bottom),
fill="white",label.size = NA, hjust = 2)+
mytheme
ggplot(temp.df)+
geom_vline(data=dates.df,aes(xintercept=depth.cm,color=location),show_guide = FALSE)+
geom_label(data=temp_dates.df,aes(x=depth.cm,y=value,label=date.bottom),
fill="white",label.size = NA, hjust = 1)+
mytheme
ggplot(temp.df)+
geom_vline(data=dates.df,aes(xintercept=depth.cm,color=location),show_guide = FALSE)+
geom_label(data=temp_dates.df,aes(x=depth.cm,y=value,label=date.bottom),
fill="white",label.size = NA, hjust = 0.8)+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/isotope_data.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
load("Rdata/iso.Rdata")
View(iso.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/isotope_data.R", echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
load("Rdata/iso.Rdata")
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
# import data -------------------------------------------------------------
load("Rdata/iso.Rdata")
# graphing parameters -----------------------------------------------------
theme_set(theme_classic())
mywidth=9
myheight=6
legend_title <- NULL
mytheme <- list(
geom_vline(aes(xintercept=date.depth.cm,color=location),show_guide = FALSE),
geom_label(aes(x=date.depth.cm,y=date.value,label=date.bottom),
fill="white",label.size = NA, hjust = 0.8),
geom_smooth(aes(x=depth.cm, y=value, color=location,
#linetype=location
),
se=FALSE),
geom_point(aes(x=depth.cm, y=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
coord_flip(),
scale_x_reverse(),
facet_wrap(~factor,nrow=1,scales="free_x",strip.position = "bottom",labeller = label_parsed),
labs(y=NULL,x="Depth\n(cm)",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right"),
scale_color_viridis_d(),
scale_fill_viridis_d(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.total", "P.org","NP","CN"),
factor=as.character(
c(
bquote("Location"),
bquote(atop("Depth","(cm)")),
bquote("%"*"N"),
bquote(delta^15*N~'(‰)'),
bquote("%"*C[Total]),
bquote(delta^13*C[Total]~'(‰)'),
bquote("%"*C[Organic]),
bquote(delta^13*C[Organic]~'(‰)'),
bquote("Count"),
bquote("%"*P[inorg]),
bquote(P[Total]~x~10^-2~'(%)'),
bquote("%"*P[organic]),
bquote("N:P"~"Ratio"),
bquote("C:N"~"Ratio")
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- master.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("Location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
plot_dates <- function(dates.df,master.df){
factor_names <- master.df$factor %>%
unique()
dates.df$factor <- max(factor_names)
value <- master.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
dates.df$value <- value
return(dates.df)
}
# remove problamatic values -----------------------------------------------
temp.df <- iso.df
for (row in 1:nrow(temp.df)){
if (temp.df[row,"NP"]<0 | temp.df[row,"NP"]>40){
temp.df[row,"NP"] <- NA
}
if (temp.df[row,"CN"]>40){
temp.df[row,"CN"] <- NA
}
if (is.na(temp.df[row,"%C.organic"])==FALSE & temp.df[row,"%C.organic"] >10){
temp.df[row,"%C.organic"] <- NA
}
if (is.na(temp.df[row,"%N"])==FALSE & temp.df[row,"%N"]>0.7){
temp.df[row,"%N"] <- NA
}
}
iso.df <- temp.df
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
temp_dates.df <- plot_dates(dates.df,temp.df)
ggplot(temp.df)+
mytheme
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("Location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
View(temp.df)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/isotope_data.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
geom_vline(data=subset(temp.df,type=="Cs"),aes(xintercept=date.depth.cm),, color="black", show_guide = FALSE)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
ggplot(temp.df)+
geom_vline(data=subset(temp.df,type=="Cs"),aes(xintercept=date.depth.cm),color="black", show_guide = FALSE)+
mytheme
View(temp.df)
ggplot(temp.df)+
geom_vline(data=subset(temp.df,temp.df$type=="Cs"),aes(xintercept=date.depth.cm),color="black", show_guide = FALSE)+
mytheme
ggplot(temp.df)+
mytheme+
geom_vline(data=subset(temp.df,type=="Cs"),aes(xintercept=date.depth.cm),color="black", show_guide = FALSE)+
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
ggplot(temp.df)+
mytheme+
geom_vline(data=subset(temp.df,type=="Cs"),aes(xintercept=date.depth.cm),color="black", show_guide = FALSE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
library(ggsci)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_hline(yintercept=0)+
geom_hline(yintercept=.25)+
geom_hline(yintercept=.5)+
geom_hline(yintercept=.75)+
geom_hline(yintercept=1)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
#scale_fill_brewer(palette="RdYlBu")
scale_fill_jco()
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_hline(yintercept=0)+
geom_hline(yintercept=.25)+
geom_hline(yintercept=.5)+
geom_hline(yintercept=.75)+
geom_hline(yintercept=1)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
#scale_fill_brewer(palette="RdYlBu")
scale_fill_material("grey")
getPalette = colorRampPalette(brewer.pal(10, "RdYlBu"))
colourCount = length(unique(grain.df$Class))
getPalette = colorRampPalette(brewer.pal(10, "RdYlBu"))
ggplot(grain.df, aes(x=Depth,y=Percentage, fill=Class))+
geom_bar(position="fill",stat="identity",width=2)+
geom_hline(yintercept=0)+
geom_hline(yintercept=.25)+
geom_hline(yintercept=.5)+
geom_hline(yintercept=.75)+
geom_hline(yintercept=1)+
coord_flip()+
#scale_x_reverse(labels=function(x)2020-(x*3))+
scale_x_reverse()+
scale_y_continuous(labels=function(y)y*100)+
facet_wrap(~Location)+
xlab("Depth\n(cm)")+
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.top = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")+
#scale_fill_brewer(palette="RdYlBu")
#scale_fill_material("grey")
scale_fill_manual(values = getPalette(colourCount))
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/grainsize.R", echo=TRUE)
save(grain.df,file="Rdata/grainsize.Rdata")
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
rm(list = ls()) #clear environment
# import packages ---------------------------------------------------------
library(tidyverse)
library(readxl)
library(progress)
library(RColorBrewer)
library(ggsci)
# import data -------------------------------------------------------------
load("Rdata/iso.Rdata")
load("Rdata/grainsize.Rdata")
# depth shift -------------------------------------------------------------
date_shift <- TRUE
if (date_shift==TRUE){
for (row in 1:nrow(iso.df)){
if (iso.df[row,"location"]=="South"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+12
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+12
}
if (iso.df[row,"location"]=="North"){
iso.df[row,"depth.cm"] <- iso.df[row,"depth.cm"]+4
iso.df[row,"date.depth.cm"] <- iso.df[row,"date.depth.cm"]+4
}
}
}
if (date_shift==TRUE){
for (row in 1:nrow(grain.df)){
if (grain.df[row,"Location"]=="South"){
grain.df[row,"Depth"] <- grain.df[row,"Depth"]+12
}
if (grain.df[row,"Location"]=="North"){
grain.df[row,"Depth"] <- grain.df[row,"Depth"]+4
}
}
}
# graphing parameters -----------------------------------------------------
theme_set(theme_classic())
mywidth=9
myheight=6
legend_title <- NULL
basetheme <- list(
coord_flip(),
scale_x_reverse(),
theme(
text=element_text(size=12),
strip.background = element_blank(),
strip.placement = "outside",
panel.grid.major.x = element_blank(),
panel.grid.major.y = element_blank(),
strip.text.y.left = element_text(angle = 0,size=12),
strip.text.x.bottom = element_text(size=12),
axis.title.y = element_text(angle = 0,vjust=0.5,size=12),
axis.text.x = element_text(colour = "black"),
axis.text.y = element_text(colour = "black"),
legend.position = "right")
)
mytheme <- list(
basetheme,
geom_vline(aes(xintercept=date.depth.cm,color=location),show_guide = FALSE),
geom_label(aes(x=date.depth.cm,y=date.value,label=date.bottom),
fill="white",label.size = NA, hjust = 0.8),
geom_smooth(aes(x=depth.cm, y=value, color=location,
#linetype=location
),
se=FALSE),
geom_point(aes(x=depth.cm, y=value, fill=location, shape=location),
size=2.5,color="black",alpha=0.7),
facet_wrap(~factor,nrow=1,scales="free_x",strip.position = "bottom",labeller = label_parsed),
labs(y=NULL,x="Depth\n(cm)",shape=legend_title,color=legend_title,fill=legend_title,linetype=legend_title),
scale_color_jco(),
scale_fill_jco(),
scale_shape_manual(values=c(21:24)),
scale_linetype_manual(values=c(3,2,1))
)
ylabels.df <- data.frame(name=c('location','depth.cm','%N', "d15N.permil", "%C.total",
'd13C.total',"%C.organic",'d13C.organic',"n","P.inorg",
"P.total", "P.org","NP","CN"),
factor=as.character(
c(
bquote("Location"),
bquote(atop("Depth","(cm)")),
bquote("%"*"N"),
bquote(delta^15*N~'(‰)'),
bquote("%"*C[Total]),
bquote(delta^13*C[Total]~'(‰)'),
bquote("%"*C[Organic]),
bquote(delta^13*C[Organic]~'(‰)'),
bquote("Count"),
bquote("%"*P[inorg]),
bquote(P[Total]~x~10^-2~'(%)'),
bquote("%"*P[organic]),
bquote("N:P"~"Ratio"),
bquote("C:N"~"Ratio")
)
)
)
plot_longer <- function(data.df,long_cols){
plot.df <- data.df %>%
pivot_longer(long_cols)
plot.df <- left_join(plot.df,ylabels.df)
factor_names <- plot.df %>%
pull(factor) %>%
unique()
plot.df$factor <- factor(plot.df$factor,levels=factor_names,ordered=TRUE)
max_factor <- plot.df$factor %>%
unique() %>%
max()
dates.df <- plot.df[,c("location","value","factor","date.depth.cm","type")] %>%
filter(factor==max_factor)
dates.df$date.value <- dates.df %>%
filter(factor==max(factor_names)) %>%
pull(value) %>%
max()
plot.df <- left_join(plot.df,dates.df)
return (plot.df)
}
# remove problamatic values -----------------------------------------------
temp.df <- iso.df
for (row in 1:nrow(temp.df)){
if (temp.df[row,"NP"]<0 | temp.df[row,"NP"]>40){
temp.df[row,"NP"] <- NA
}
if (temp.df[row,"CN"]>40){
temp.df[row,"CN"] <- NA
}
if (is.na(temp.df[row,"%C.organic"])==FALSE & temp.df[row,"%C.organic"] >10){
temp.df[row,"%C.organic"] <- NA
}
if (is.na(temp.df[row,"%N"])==FALSE & temp.df[row,"%N"]>0.7){
temp.df[row,"%N"] <- NA
}
}
iso.df <- temp.df
# plot isotopes -----------------------------------------------------------
temp.df <- plot_longer(iso.df,c("d13C.organic","d15N.permil"))
ggplot(temp.df)+
mytheme
ggsave("figures/isotopes.png",width=mywidth, height=myheight)
# elemental ratios --------------------------------------------------------
temp.df <- plot_longer(iso.df,c("CN","NP","d15N.permil"))
vline_factors <- temp.df$factor %>%
unique()
vlines.df <- data.frame(factor=vline_factore,x=c(NA,16,NA))
vlines.df <- data.frame(factor=vline_factors,x=c(NA,16,NA))
View(vlines.df)
ggplot(temp.df)+
geom_vlines(data=vlines.df,aes(xintercept=x))
ggplot(temp.df)+
geom_vline(data=vlines.df,aes(xintercept=x))
ggplot(temp.df)+
geom_vline(data=vlines.df,aes(xintercept=x))+
mytheme
temp.df <- plot_longer(iso.df,c("CN","NP","d15N.permil"))
hline_factors <- temp.df$factor %>%
unique()
hlines.df <- data.frame(factor=hline_factors,y=c(NA,16,NA))
ggplot(temp.df)+
geom_hline(data=vlines.df,aes(yintercept=y))+
mytheme
ggplot(temp.df)+
geom_hline(data=hlines.df,aes(yintercept=y))+
mytheme
ggplot(temp.df)+
geom_hline(data=hlines.df,aes(yintercept=y),linestyle="dashed")+
mytheme
ggplot(temp.df)+
geom_hline(data=hlines.df,aes(yintercept=y),linetype="dashed")+
mytheme
source("~/Sawyer Balint/RStudio/wickford_cores/scripts/core_graphing.R", encoding = 'UTF-8', echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/grainsize.R", echo=TRUE)
source("~/Sawyer Balint/RStudio/wickford_cores/grainsize.R", echo=TRUE)
